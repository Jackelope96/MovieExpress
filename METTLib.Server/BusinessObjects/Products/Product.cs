// Generated 09 Mar 2021 18:13 - Singular Systems Object Generator Version 2.2.694
//<auto-generated/>
using System;
using Csla;
using Csla.Serialization;
using Csla.Data;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using Singular;
using System.Data;
using System.Data.SqlClient;


namespace MELib.Products
{
    [Serializable]
    public class Product
     : SingularBusinessBase<Product>
    {
        #region " Properties and Methods "

        #region " Properties "

        public static PropertyInfo<int> ProductIDProperty = RegisterProperty<int>(c => c.ProductID, "ID", 0);
        /// <summary>
        /// Gets the ID value
        /// </summary>
        [Display(AutoGenerateField = false), Key]
        public int ProductID
        {
            get { return GetProperty(ProductIDProperty); }
        }

        public static PropertyInfo<int> CategoryIDProperty = RegisterProperty<int>(c => c.CategoryID, "Category", 0);
        /// <summary>
        /// Gets and sets the Category value
        /// </summary>
        [Display(Name = "Category", Description = "")]
        public int CategoryID
        {
            get { return GetProperty(CategoryIDProperty); }
            set { SetProperty(CategoryIDProperty, value); }
        }

        public static PropertyInfo<String> ProductNameProperty = RegisterProperty<String>(c => c.ProductName, "Product Name", "");
        /// <summary>
        /// Gets and sets the Product Name value
        /// </summary>
        [Display(Name = "Product Name", Description = ""),
        StringLength(255, ErrorMessage = "Product Name cannot be more than 255 characters")]
        public String ProductName
        {
            get { return GetProperty(ProductNameProperty); }
            set { SetProperty(ProductNameProperty, value); }
        }

        public static PropertyInfo<Decimal> ProductPriceProperty = RegisterProperty<Decimal>(c => c.ProductPrice, "Product Price", 0D);
        /// <summary>
        /// Gets and sets the Product Price value
        /// </summary>
        [Display(Name = "Product Price", Description = "")]
        public Decimal ProductPrice
        {
            get { return GetProperty(ProductPriceProperty); }
            set { SetProperty(ProductPriceProperty, value); }
        }

        public static PropertyInfo<int> ProductStatusIDProperty = RegisterProperty<int>(c => c.ProductStatusID, "Product Status", 0);
        /// <summary>
        /// Gets and sets the Product Status value
        /// </summary>
        [Display(Name = "Product Status", Description = "")]
        public int ProductStatusID
        {
            get { return GetProperty(ProductStatusIDProperty); }
            set { SetProperty(ProductStatusIDProperty, value); }
        }

        public static PropertyInfo<DateTime?> CreatedAtProperty = RegisterProperty<DateTime?>(c => c.CreatedAt, "Created At");
        /// <summary>
        /// Gets and sets the Created At value
        /// </summary>
        [Display(Name = "Created At", Description = "")]
        public DateTime? CreatedAt
        {
            get
            {
                return GetProperty(CreatedAtProperty);
            }
            set
            {
                SetProperty(CreatedAtProperty, value);
            }
        }

        #endregion

        #region " Methods "

        protected override object GetIdValue()
        {
            return GetProperty(ProductIDProperty);
        }

        public override string ToString()
        {
            if (this.ProductName.Length == 0)
            {
                if (this.IsNew)
                {
                    return String.Format("New {0}", "Product");
                }
                else
                {
                    return String.Format("Blank {0}", "Product");
                }
            }
            else
            {
                return this.ProductName;
            }
        }

        #endregion

        #endregion

        #region " Validation Rules "

        protected override void AddBusinessRules()
        {
            base.AddBusinessRules();
        }

        #endregion

        #region " Data Access & Factory Methods "

        protected override void OnCreate()
        {
            // This is called when a new object is created
            // Set any variables here, not in the constructor or NewProduct() method.
        }

        public static Product NewProduct()
        {
            return DataPortal.CreateChild<Product>();
        }

        public Product()
        {
            MarkAsChild();
        }

        internal static Product GetProduct(SafeDataReader dr)
        {
            var p = new Product();
            p.Fetch(dr);
            return p;
        }

        protected void Fetch(SafeDataReader sdr)
        {
            using (BypassPropertyChecks)
            {
                int i = 0;
                LoadProperty(ProductIDProperty, sdr.GetInt32(i++));
                LoadProperty(CategoryIDProperty, sdr.GetInt32(i++));
                LoadProperty(ProductNameProperty, sdr.GetString(i++));
                LoadProperty(ProductPriceProperty, sdr.GetDecimal(i++));
                LoadProperty(ProductStatusIDProperty, sdr.GetInt32(i++));
                LoadProperty(CreatedAtProperty, sdr.GetValue(i++));
            }

            MarkAsChild();
            MarkOld();
            BusinessRules.CheckRules();
        }

        protected override Action<SqlCommand> SetupSaveCommand(SqlCommand cm)
        {
            AddPrimaryKeyParam(cm, ProductIDProperty);

            cm.Parameters.AddWithValue("@CategoryID", GetProperty(CategoryIDProperty));
            cm.Parameters.AddWithValue("@ProductName", GetProperty(ProductNameProperty));
            cm.Parameters.AddWithValue("@ProductPrice", GetProperty(ProductPriceProperty));
            cm.Parameters.AddWithValue("@ProductStatusID", GetProperty(ProductStatusIDProperty));
            cm.Parameters.AddWithValue("@CreatedAt", Singular.Misc.NothingDBNull(CreatedAt));

            return (scm) =>
            {
    // Post Save
    if (this.IsNew)
                {
                    LoadProperty(ProductIDProperty, scm.Parameters["@ProductID"].Value);
                }
            };
        }

        protected override void SaveChildren()
        {
            // No Children
        }

        protected override void SetupDeleteCommand(SqlCommand cm)
        {
            cm.Parameters.AddWithValue("@ProductID", GetProperty(ProductIDProperty));
        }

        #endregion

    }

}